with actionable_rows as (
  select distinct
    case
      when (IIF(1, UPPER(t1.title) = 'ADMIN', 'this path if 0/false')) or replace('We keep this stuff -not this stuff', 'not this stuff', '') = 'We keep this stuff -' then 'ADMIN'
      when (initcase(t2.name) = 'Title Case') or (lower(t2.name) = 'bob') then 'REGULAR'
      else 'DEFAULT_VALUE'
    end as name
    , coalesce (null, 'new_value', 'COALESCE selects the first non null value') as value
    , t2.id as table2_id
    , newid() as id
    , json_query(t1.json_data, '$.list') -- use json_query for complex types and json_value for simple types
  from table2 as t2
  where
  t2.id not in (
    select distinct
    t1.id
    from table1 as t1
    where
    t1.type = 'account'
    and json_value(t1.json_data, '$.old_value') != 'junk'
    and t1.created_date > dateadd(day, -7, try_convert(date, '12/01/23', 1))
    and t1.name in ('Bob', 'Ross')
    and try_convert(int, t1.int_string) > 100,
  )
)
-- INSERT
-- INSERT INTO table1
-- (
--   name
--   , value
--   , table2_id
--   , id
-- )
select
  name
  , value
  , table2_id
  , id
from actionable_rows
;
-- OR UPDATE
-- update table1
-- set name=ar.name
--     , value=ar.value
--     , table2_id=ar.table2_id
-- from table1 as t1
-- inner join (
--   select name, value, table2_id, id
--   from actionable_rows
-- ) as ar on t1.id = ar.id
-- ;
-- OR DELETE
-- delete from table1
-- from table1 as t1
-- inner join actionable_rows as ar on t1.id = ar.id;
-- ;
