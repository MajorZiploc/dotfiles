# SET OPERATIONS BEGIN
# Referenced https://catonmat.net/set-operations-in-unix-shell

# set operations
function set_elem() {
  # membership check. ex: grep -xs 'element' set
  # returns 1 if set contains element, 0 if not
  local ele=$1;
  local set=$2;
  grep -xq "$ele" $set;
}

function set_eq() {
  # check if sets are equal
  # $ diff -q <(sort A | uniq) <(sort B | uniq)
  # return code 1 -- sets A and B are not equal
  # $ diff -q <(sort Aequal | uniq) <(sort Bequal | uniq)
  # return code 0 -- sets A and B are equal
  local set1=$1;
  local set2=$2;
  diff -q <(sort $set1 | uniq) <(sort $set2 | uniq);
}

function set_cardinality() {
  # the number of elements in the set
  local set=$1;
  sort -u $set | wc -l;
}

function set_subset() {
  # test if $1 is a subset of $2
  local subset=$1;
  local superset=$2;
  # comm returns no output if $subset is a subset of $superset
  # comm outputs something if $subset is not a subset of $superset
  [[ -z $(comm -23 <(sort $1 | uniq) <(sort $2 | uniq) | head -1) ]]
}

function set_union () {
  # returns elements that occur in either sets or both sets
  local set1=$1;
  local set2=$2;
  sort -u $set1 $set2;
}

function set_intersection() {
  # returns elements that occur in both sets
  local set1=$1;
  local set2=$2;
  comm -12 <(sort $set1) <(sort $set2);
}

function set_complement() {
  # returns elements that occur in $1 and not in $2
  # $1 - $2
  local set1=$1;
  local set2=$2;
  comm -23 <(sort $set1) <(sort $set2);
}

function set_symmetric_difference() {
  # returns elements that occur in either set, but not both sets
  local set1=$1;
  local set2=$2;
  sort $set1 $set2 | uniq -u;
}

function set_power_set_experimental() {
  # EXPERIMENTAL!
  # returns a set that contains all subsets of the set
  local set=$1;
  perl -le '
  sub powset {
   return [[]] unless @_;
   my $head = shift;
   my $list = &powset;
   [@$list, map { [$head, @$_] } @$list]
  }
  chomp(my @e = <>);
  for $p (@{powset(@e)}) {
   print @$p;
  }' $set
}

function set_cardesian_product_experimental() {
  # EXPERIMENTAL!
  # returns a set that contains all possible pairs of elements from one set and the other
  # $1 x $2
  local set1=$1;
  local set2=$2;
  while read a; do while read b; do echo "$a, $b"; done < $set1; done < $set2;
}

function set_disjoint_experimental() {
  # EXPERIMENTAL!
  # The disjoint set test operation finds if two sets are disjoint, i.e., they do not contain common elements.
  local set1=$1;
  local set2=$2;
  # returns 0 if sets are disjoint
  # returns 1 if sets are not disjoint
  awk '{ if (++seen[$0]==2) exit 1 }' $set1 $set2;
}

function set_minimum() {
  local set=$1;
  head -1 <(sort $set);
}

function set_minimum_num() {
  local set=$1;
  head -1 <(sort -n $set);
}

function set_maximum() {
  local set=$1;
  tail -1 <(sort $se1);
}

function set_maximum_num() {
  local set=$1;
  tail -1 <(sort -n $set);
}

# SET OPERATIONS END

