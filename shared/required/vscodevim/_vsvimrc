nnoremap U <c-r>
nnoremap Y y$

" keep focus at center of screen
" nnoremap n nzzzv
" nnoremap N Nzzzv

" normal mode whitespace
" nnoremap <cr> o<esc>
" nnoremap <s-cr> O<esc>

" indenting
" nnoremap <tab> >>
" nnoremap <s-tab> <<
" vnoremap <tab> >
" vnoremap <s-tab> <
" inoremap <tab> <c-t>
" inoremap <s-tab> <c-d>

" split line (compliment of <s-j> to join)
" nnoremap <s-k> h<cr>^

" Helpful for with goto definition or reference doesnt work
" pair with fzf or find_* bash commands
nnoremap <silent> <leader>yw "+yiw

" navigation
" Using the original meaning of this key
" nnoremap H ^
" Using the original meaning of this key
" vnoremap H ^
" Using the original meaning of this key
" onoremap H ^
" Using the original meaning of this key
" nnoremap L $
" Using the original meaning of this key
" vnoremap L $
" Using the original meaning of this key
" onoremap L $

" control-keys for select all, undo, save, cut, copy, paste, quit
nnoremap <c-a> ggVG
nnoremap <c-s> :w<cr>
inoremap <c-s> <esc>:w<cr>a
nnoremap <c-z> u
vnoremap <c-x> "+d
vnoremap <c-c> "+y
nnoremap <c-v> "+p
vnoremap <c-v> "+p
inoremap <c-v> <esc>"+pa
nnoremap <c-w> :q<cr>
inoremap <c-w> <esc>:q<cr>
vnoremap <c-w> <esc>:q<cr>

" leader key
let mapleader=" "
" swap word under cursor with yank register
nnoremap <silent> <leader>s viwp
" swap word under cursor with system clipboard
nnoremap <silent> <leader>S viw"+p
" trim trailing spaces in file
nnoremap <silent> <leader>lt :%s/[ \t]\+$//<cr>

" true delete
vnoremap <leader>cd "_d
" true delete followed by a paste
vnoremap <leader>cp "_dP

" enable backspace
set backspace=indent,eol,start

" indentation settings
set expandtab
set tabstop=2
set shiftwidth=2
set autoindent

set scrolloff=8
set encoding=utf-8
set incsearch

" find settings
set ignorecase
set smartcase
set hlsearch
" clear search highlight with Backspace
nnoremap <silent> <bs> :noh<cr>

" max time between key presses to trigger a multi-key binding
set timeoutlen=300

set shell=VIM_SHELL_PLACEHOLDER

nmap <leader>gd :vsc editor.action.revealDefinition<cr>
nmap gr :vsc editor.action.goToReferences<cr>
nmap <leader>gr :vsc editor.action.goToReferences<cr>
nmap gi :vsc editor.action.goToImplementation<cr>
nmap <leader>gi :vsc editor.action.goToImplementation<cr>
nmap gq :vsc editor.action.showHover<cr>
vmap gq :vsc editor.action.showHover<cr>
nmap <leader>gq :vsc editor.action.showHover<cr>
vmap <leader>gq :vsc editor.action.showHover<cr>
nmap <leader>wi :vsc editor.action.showHover<cr>
vmap <leader>wi :vsc editor.action.showHover<cr>
nmap <s-k> :vsc editor.action.showHover<cr>
vmap gf :vsc editor.action.formatSelection<cr>
vmap <leader>gf :vsc editor.action.formatSelection<cr>

nmap <leader>e :vsc editor.action.marker.next<cr>
nmap <leader>E :vsc editor.action.marker.prev<cr>
nmap [d :vsc editor.action.marker.prev<cr>
nmap ]d :vsc editor.action.marker.next<cr>

nmap [g :vsc workbench.action.editor.previousChange<cr>
nmap ]g :vsc workbench.action.editor.nextChange<cr>

" backup mappings for <esc>
" inoremap kj <esc>
" imap kj <esc>
" imap <tab> <esc>
imap <c-l> <esc>
imap <c-[> <esc>
" imap 1` <esc>
" imap `1 <esc>

" Reselect visual selection after indenting
vnoremap < <gv
vnoremap > >gv

" repeat dot command on a visual selection
xmap <silent> . :normal .<cr>

" repeat macro command on a visual selection
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @" . nr2char(getchar())
endfunction
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

" save all dirty buffers
nmap <c-s> :wa<cr>

" copy to system clipboard
vnoremap <leader>cc "+y

" Patch H and L to have 8 padding from top
nnoremap <s-h> Hjjjjjjjj
nnoremap <s-l> Lkkkkkkkk<c-y>
